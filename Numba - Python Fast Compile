{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8HPLr5WKuakUC7bhcz5K9"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-L4P3NMC8LIQ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from numba import njit\n",
        "import time\n",
        "\n",
        "try:\n",
        "    from numba import cuda\n",
        "    cuda_available = cuda.is_available()\n",
        "except ImportError:\n",
        "    cuda_available = False\n",
        "\n",
        "@njit\n",
        "def kare_al(arr):\n",
        "    result = np.empty_like(arr)\n",
        "    for i in range(arr.shape[0]):\n",
        "        result[i] = arr[i] * arr[i]\n",
        "    return result\n",
        "\n",
        "def kare_al_normal(arr):\n",
        "    result = np.empty_like(arr)\n",
        "    for i in range(arr.shape[0]):\n",
        "        result[i] = arr[i] * arr[i]\n",
        "    return result\n",
        "\n",
        "if cuda_available:\n",
        "    @cuda.jit\n",
        "    def kare_al_cuda(arr, result):\n",
        "        idx = cuda.grid(1)\n",
        "        if idx < arr.size:\n",
        "            result[idx] = arr[idx] * arr[idx]\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    dizi = np.arange(10**6)\n",
        "\n",
        "    # Normal fonksiyonun süresi\n",
        "    start = time.time()\n",
        "    normal_sonuc = kare_al_normal(dizi)\n",
        "    normal_sure = time.time() - start\n",
        "\n",
        "    # Numba fonksiyonunun ilk çağrısı (derleme süresi dahil)\n",
        "    kare_al(dizi)\n",
        "\n",
        "    # Numba fonksiyonunun ikinci çağrısı (sadece çalışma süresi)\n",
        "    start = time.time()\n",
        "    numba_sonuc = kare_al(dizi)\n",
        "    numba_sure = time.time() - start\n",
        "\n",
        "    # CUDA fonksiyonu (varsa)\n",
        "    if cuda_available:\n",
        "        dizi_device = cuda.to_device(dizi)\n",
        "        result_device = cuda.device_array_like(dizi)\n",
        "        threadsperblock = 256\n",
        "        blockspergrid = (dizi.size + (threadsperblock - 1)) // threadsperblock\n",
        "\n",
        "        # İlk çağrı (derleme süresi dahil)\n",
        "        kare_al_cuda[blockspergrid, threadsperblock](dizi_device, result_device)\n",
        "        cuda.synchronize()\n",
        "\n",
        "        # Zaman ölçümü\n",
        "        start = time.time()\n",
        "        kare_al_cuda[blockspergrid, threadsperblock](dizi_device, result_device)\n",
        "        cuda.synchronize()\n",
        "        cuda_sure = time.time() - start\n",
        "        cuda_sonuc = result_device.copy_to_host()\n",
        "    else:\n",
        "        cuda_sure = None\n",
        "        cuda_sonuc = None\n",
        "\n",
        "    # Sonuçları daha düzenli ve anlamlı şekilde hazırla\n",
        "    output_lines = [\n",
        "        \"=== Fonksiyon Karşılaştırma Sonuçları ===\",\n",
        "        \"\",\n",
        "        \"1. Normal Python Fonksiyonu:\",\n",
        "        f\"   - Çalışma süresi: {normal_sure:.6f} saniye\",\n",
        "        \"\",\n",
        "        \"2. Numba (CPU JIT) Fonksiyonu:\",\n",
        "        f\"   - Çalışma süresi: {numba_sure:.6f} saniye\",\n",
        "        f\"   - Sonuçlar aynı mı? {'Evet' if np.allclose(normal_sonuc, numba_sonuc) else 'Hayır'}\",\n",
        "    ]\n",
        "    if cuda_available:\n",
        "        output_lines += [\n",
        "            \"\",\n",
        "            \"3. Numba CUDA (GPU) Fonksiyonu:\",\n",
        "            f\"   - Çalışma süresi: {cuda_sure:.6f} saniye\",\n",
        "            f\"   - Sonuçlar aynı mı? {'Evet' if np.allclose(normal_sonuc, cuda_sonuc) else 'Hayır'}\",\n",
        "        ]\n",
        "    else:\n",
        "        output_lines += [\n",
        "            \"\",\n",
        "            \"3. Numba CUDA (GPU) Fonksiyonu:\",\n",
        "            \"   - CUDA desteklenmiyor veya numba.cuda bulunamadı.\"\n",
        "        ]\n",
        "    output_lines.append(\"\")\n",
        "    output_lines.append(\"Not: CUDA fonksiyonu için uygun bir NVIDIA GPU ve numba.cuda desteği gereklidir.\")\n",
        "\n",
        "    for line in output_lines:\n",
        "        print(line)\n",
        "\n",
        "    # Sonuçları dosyaya yaz\n",
        "    with open(\"sonuclar.txt\", \"w\", encoding=\"utf-8\") as f:\n",
        "        for line in output_lines:\n",
        "            f.write(line + \"\\n\")\n"
      ]
    }
  ]
}